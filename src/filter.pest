expr = { SOI ~ ws* ~ simpleExpr ~ ws* ~ EOI }
simpleExpr = { ws* ~ andExpr ~ ws* ~ (or ~ simpleExpr)? | andExpr }
andExpr = { ws* ~ relExpr ~ ws* ~ (and ~ andExpr)? | relExpr }
relExpr = { ws* ~ sumExpr ~ ws* ~ (relop ~ relExpr)? | sumExpr }
sumExpr = { ws* ~ unaryExpr ~ ws* ~ (sumop ~ sumExpr)? | unaryExpr }
relop = { "==" | "!=" | ">=" | "<=" | ">" | "<" | "=~" }
sumop = { "&" }
unaryExpr = { ws* ~ unaryOp ~ unaryExpr | factor }
unaryOp = { "!" | "-" }
factor = { ws* ~ (identifier | numeral | string | parensExpr){1,1} }
string = { ws* ~ dquote ~ stringChars ~ dquote }
dquote = { "\"" }
stringChars = { (quoteChar | ASCII_ALPHANUMERIC | (chars))* }
chars = { "." | "~" | "*" | "(" | ")" | "{" | "}" | "[" | "]" }
quoteChar = { "\\" ~ ("\"" | "\\" | "n" | "r" | "t" | "f" | "v" | "0" ) }
parensExpr = _{ "(" ~ ws* ~ simpleExpr ~ ws* ~ ")" }
identifier = @{ name }
nameHead = { ASCII_ALPHA | "_" }
nameTail = { ASCII_ALPHANUMERIC | "_" }
name = { nameHead ~ nameTail* | nameHead+ }
numeral = @{ ("0x" ~ ASCII_HEX_DIGIT+) | ("0o" ~ ASCII_OCT_DIGIT+) | ("0b" ~ ASCII_BIN_DIGIT+) | ASCII_DIGIT+ }
or = { "||" }
and = { "&&" }
ws = { " " | "\t" }